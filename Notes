 How would you load test a webpage without using any test tools?
SOLUTION
Load testing helps to identify a web application's maximum operating capacity, as well as any bottlenecks
that may interfere with its performance. Similarly, it can check how an application responds to variations
in load.
To perform load testing, we must first identify the performance critical scenarios and the metrics which
fulfill our performance objectives. Typical criteria include:
• Response time
• Throughput
• Resource utilization
• Maximum load that the system can bear.
Then, we design tests to simulate the load, taking care to measure each of these criteria.
In the absence of formal testing tools, we can basically create our own. For example, we could simulate
concurrent users by creating thousands of virtual users. We would write a multi-threaded program with
thousands of threads, where each thread acts as a real-world user loading the page. For each user, we would
programmatically measure response time, data 1/0, etc.
We would then analyze the results based on the data gathered during the tests and compare it with the
accepted values.

Test a Pen: How would you test a pen?
SOLUTION
This problem is largely about understanding the constraints and approaching the problem in a structured
manner.
To understand the constraints, you should ask a lot of questions to understand the "who, what, where,
when, how and why" of a problem (or as many of those as apply to the problem). Remember that a good
tester understands exactly what he is testing before starting the work.
To illustrate the technique in this problem, lets go through the idea.
 How would you test a pen?
 Let me find out a bit about the pen. Who is going to use the pen?
 Probably children.
 Okay, that's interesting. What will they be doing with it? Will they be writing, drawing, or
 doing something else with it?
 Drawing.
 Okay, great. On what? Paper? Clothing? Walls?
 On clothing.
 Great. What kind of tip does the pen have? Felt? Ballpoint? Is it intended to wash off, or is it
intended to be permanent?
 It's intended to wash off.
Many questions later, you may get to this:
 Okay, so as I understand it, we have a pen that is being targeted at 5 to 10-year-olds. The pen
has a felt tip and comes in red, green, blue and black. It's intended to wash off when clothing is washed.
Is that correct?
The candidate now has a problem that is significantly different from what it initially seemed to be. This is
not uncommon. In fact, many interviewers intentionally give a problem that seems clear (everyone knows
what a pen is!), only to let you discover that it's quite a different problem from what it seemed. Their belief
is that users do the same thing, though users do so accidentally.
Now that you understand what you're testing, it's time to come up with a plan of attack. The key here is
structure.
Consider what the different components of the object or problem, and go from there. In this case, the
components might be:
Fact check: Verify that the pen is felt tip and that the ink is one of the allowed colors.
Intended use: Drawing. Does the pen write properly on clothing?
• Intended use: Washing. Does it wash off of clothing (even if it's been there for an extended period of
time)? Does it wash off in hot warm and cold water?
Safety: Is the pen safe (non-toxic) for children?
Unintended uses: How else might children use the pen?They might write on other surfaces, so you need
to check whether the behavior there is correct. They might also stomp on the pen, throw it, and so on.
You'll need to make sure that the pen holds up under these conditions.
Remember that in any testing question, you need to test both the intended and unintended scenarios.
People don't always use the product the way you want them to.

: How would you test an ATM in a distributed banking system?
SOLUTION
The first thing to do on this question is to clarify assumptions. Ask the following questions:

• Who is going to use the ATM? Answers might be "anyone;' or it might be "blind people;' or any number
of other answers.
What are they going to use it for? Answers might be "withdrawing money;' "transferring money;'
"checking their balance;' or many other answers.
• What tools do we have to test? Do we have access to the code, or just to the ATM?
Remember: a good tester makes sure she knows what she's testing!
Once we understand what the system looks like, we'll want to break down the problem into different testable components. These components include:
Logging in
• Withdrawing money
Depositing money
• Checking balance
Transferring money
We would probably want to use a mix of manual and automated testing.
Manual testing would involve going through the steps above, making sure to check for all the error cases
(low balance, new account, nonexistent account, and so on).
Automated testing is a bit more complex. We'll want to automate all the standard scenarios, as shown
above, and we also want to look for some very specific issues, such as race conditions. Ideally, we would be
able to set up a closed system with fake accounts and ensure that, even if someone withdraws and deposits
money rapidly from different locations, he never gets money or loses money that he shouldn't.
Above all, we need to prioritize security and reliability. People's accounts must always be protected, and we
must make sure that money is always properly accounted for. No one wants to unexpectedly lose money! A
good tester understands the system priorities. 
